<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.xieli.mapper.FileInfoMapper">

<!--    <resultMap id="BaseResultMap" type="com.xieli.entity.FileInfo">-->
<!--        <id column="id" jdbcType="VARCHAR" property="id"/>-->
<!--        <result column="fileType" jdbcType="VARCHAR" property="fileType"/>-->
<!--        <result column="fileUrl" jdbcType="VARCHAR" property="fileUrl"/>-->
<!--        <result column="fileName" jdbcType="VARCHAR" property="fileName"/>-->
<!--        <result column="filePath" jdbcType="VARCHAR" property="filePath"/>-->
<!--        <result column="fileSize" jdbcType="VARCHAR" property="fileSize"/>-->
<!--        <result column="remark" jdbcType="VARCHAR" property="remark"/>-->
<!--        <result column="pigFarmId" jdbcType="VARCHAR" property="pigFarmId"/>-->
<!--        <result column="pigFarmName" jdbcType="VARCHAR" property="pigFarmName"/>-->
<!--        <result column="isenabled" jdbcType="VARCHAR" property="isenabled"/>-->
<!--        <result column="userId" jdbcType="VARCHAR" property="userId"/>-->
<!--        <result column="userName" jdbcType="VARCHAR" property="userName"/>-->
<!--        <result column="extendOne" jdbcType="VARCHAR" property="extendOne"/>-->
<!--        <result column="createTime" jdbcType="TIMESTAMP" property="createTime"/>-->
<!--    </resultMap>-->

    <sql id="PAGING_START">
       	<![CDATA[
       	SELECT * FROM ( SELECT rownum linenum, t1.* FROM (
       	]]>
	</sql>

    <sql id="PAGING_END">
       	<![CDATA[
       	) t1 WHERE rownum <= #{endRow} )
       		 where (linenum > #{startRow} )
       	]]>
	</sql>
    <select id="selectByPage" resultType="com.xieli.entity.FileInfo" parameterType="com.xieli.entity.FileInfo">
        <include refid="PAGING_START"/>
        <include refid="SELECT_CONTENT"/>
        <include refid="SELECT_PARAMETER"/>
        <include refid="ORDERBY"/>
        <include refid="PAGING_END"/>
    </select>

    <sql id="SELECT_CONTENT">
    	<![CDATA[
		SELECT
        t.id,
        t.title,
        t.dataType,
        t.fileType,
        t.fileUrl,
        t.fileName,
        t.filePath,
        t.fileSize,
        t.remark,
        t.pigFarmId,
        t.pigFarmName,
        t.isenabled,
        t.userId,
        t.userName,
        t.extendOne,
        t.createTime
		FROM t_fileInfo t
        ]]>
	</sql>

    <sql id="SELECT_PARAMETER">
        <where>
            <if test="title != null and title != ''">
                and t.title = #{title}
            </if>
            <if test="dataType != null and dataType != ''">
                and t.dataType = #{dataType}
            </if>
            <if test="fileType != null and fileType != ''">
                and t.fileType = #{fileType}
            </if>

            <if test="createtimeBegin != null and createtimeBegin != ''">
                <![CDATA[ and to_char(t.createTime,'yyyy-MM-dd') >= #{createtimeBegin} ]]>
            </if>
            <if test="createtimeEnd != null and createtimeEnd != ''">
                <![CDATA[ and to_char(t.createTime,'yyyy-MM-dd') <= #{createtimeEnd} ]]>
            </if>
        </where>
    </sql>
    <sql id="ORDERBY">
        <choose>
            <when test="sortName!=null and sortName!=''">
                ORDER BY ${sortName} ${sortOrder}
            </when>
            <otherwise>
                <!-- ORDER BY t.createTime DESC|ASC -->
            </otherwise>
        </choose>
    </sql>

    <select id="countByExample" resultType="java.lang.Integer" parameterType="com.xieli.entity.FileInfo">
        select count(*) from t_fileInfo t
        <include refid="SELECT_PARAMETER"/>
    </select>

    <insert id="addFileInfo" parameterType="com.xieli.entity.FileInfo">
        INSERT INTO t_fileInfo
        (id,title,dataType,fileType, fileUrl, fileName, filePath,fileSize, remark, pigFarmId, pigFarmName, isenabled, userId, userName, extendOne, createTime) VALUES
            (#{id},#{title,jdbcType=VARCHAR},#{dataType,jdbcType=VARCHAR}, #{fileType}, #{fileUrl}, #{fileName}, #{filePath}, #{fileSize}, #{remark,jdbcType=VARCHAR}, #{pigFarmId,jdbcType=VARCHAR}, #{pigFarmName,jdbcType=VARCHAR}, #{isenabled}, #{userId,jdbcType=VARCHAR}, #{userName,jdbcType=VARCHAR}, #{extendOne,jdbcType=VARCHAR}, #{createTime, jdbcType=TIMESTAMP})
    </insert>

    <select id="selectFileList" parameterType="com.xieli.entity.FileInfo" resultType="com.xieli.entity.FileInfo" >
        <include refid="SELECT_CONTENT" />
    </select>

    <select id="getTotal" parameterType="com.xieli.entity.FileInfo" resultType="int">
        SELECT count(1) FROM t_fileInfo t WHERE 1 = 1
        <if test="fuzzyKey!=null and fuzzyKey !=''">
            AND (t.title LIKE CONCAT('%',#{fuzzyKey},'%')
            or t.dataType LIKE CONCAT(CONCAT('%',#{fuzzyKey}),'%')
            or t.fileType LIKE CONCAT(CONCAT('%',#{fuzzyKey}),'%')
            or t.fileName LIKE CONCAT(CONCAT('%',#{fuzzyKey}),'%'))
        </if>
    </select>

    <select id="getListPage" parameterType="com.xieli.entity.FileInfo" resultType="com.xieli.entity.FileInfo">
        SELECT * FROM t_fileInfo t WHERE 1 = 1
        <if test="fuzzyKey!=null and fuzzyKey !=''">
            AND (t.title LIKE CONCAT('%',#{fuzzyKey},'%')
            or t.dataType LIKE CONCAT(CONCAT('%',#{fuzzyKey}),'%')
            or t.fileType LIKE CONCAT(CONCAT('%',#{fuzzyKey}),'%')
            or t.fileName LIKE CONCAT(CONCAT('%',#{fuzzyKey}),'%'))
        </if>
        LIMIT #{offset},#{limit}
    </select>

    <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
		delete from t_fileInfo where id = #{id}
	</delete>

    <delete id="deleteByPrimaryKeys" parameterType="java.util.List">
        delete from t_fileInfo where id in
        <foreach collection="list" index="index" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>
    <delete id="deleteByExample" parameterType="com.xieli.entity.FileInfo">
        delete from t_fileInfo t
        <include refid="SELECT_PARAMETER" />
    </delete>

</mapper>